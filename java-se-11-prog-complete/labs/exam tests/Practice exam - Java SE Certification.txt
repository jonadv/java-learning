Practice exam - Java SE Certification - correct answers

Final exam in the Prepare for the Java SE Certification course
https://learn.oracle.com/ols/course/prepare-for-java-se-certification/82508/79482

As correct answers arent shown after making the practice test online, here are the questions with the correct answers.
All of the anwers with a '-  correct' mark are verified. Some of them are debatable, and might 
therefor not be considered incorrect. Therefor, these there the correct answers as in: 
when these where selected it showed 'Ecxellent!' right after. 

__________________________________________________

// line n1
public interface Pet {
	public abstract int breed();
	// line n2
	public default Pet callPet(){
		return this;
	}
	// line n3
	void speak();
}
What is a valid annotation?
@Deprecated(forRemoval=true) at line n3	- correct
@Override at line n2
@interface at line n1
@Inherited at line n1
@Target(METHOD) at line n3
@FunctionalInterface at line n1 

__________________________________________________

Given:
public double findSurfaceArea(double length){
	return length*length;
}
Which one is a valid overloaded method?
public double findSurfaceArea2(double length){return length*length;}
public double findSurfaceArea(int length){return length*length;}		- correct
private double findSurfaceArea(double length){ return length*length;}
public void findSurfaceArea(double length){System.out.println(length*length);} 

__________________________________________________

Given:
10  public class Pet {
11      private var name;
12      private var breed = "German Shepherd";
13      private static final List<Pet> petList = new ArrayList<>();
14      public Pet(String name, var breed){
15          this.name = name;
16          this.breed = breed;
17          petList.add(this);
18      }
19      public static void printPets(){
20          for(var pet : petList){
21              System.out.println(pet.name +"", "" +pet.breed);
22          }
23      }
24  }
Which use of var is valid?
Line 11
Line 20 - correct
Line 12
Line 14
__________________________________________________

Given:
for(int i=0; i<5; i++) {
	System.out.println(++i);
}
Which is an equivalent statement?
for(int i=0; i<5; ){
    System.out.println(++i++);
 }
for(int i=0; ; i++){
    if(i<5)
       continue;
    System.out.println(++i);
 }
int i=0;					 	- correct
 while(i<5){					- correct
    System.out.println(++i);	- correct
    ++i;						- correct
 }								- correct
int i=0;
 while(i<5){
    i++;
    System.out.println(++i);
 }
__________________________________________________

Given:

1. public class Transaction {
2. 		private static int counter = 0;
3. 		private int transactionID;
4. 		private String customerName;
5. 
6. 		public void executeTransaction(String customerName) {
7. 
8. 			transactionID = counter;
9. 			counter++;
10. 		        this.customerName = customerName;
11. 
12. 	}
13. }
How do you make this code thread safe?
Change line 2 to private synchronized static int counter = 0;							- wrong
Change line 6 to public synchronized (this) executeTransaction(String customerName){
Change line 7 to synchronized(this){ and line 11 to }									- correct?
Change line 1 to public class synchronized Transaction{ 								- wrong
__________________________________________________

Given:
public String pickName(){
    List names = List.of("Barclay", "Barry", "Bert", "Bort");
    /*line 1*/
    return names.stream()
        .filter(n -> n.contains("Bart"))
        .findAny()
        /*line 2*/;
}

Which changes, made independently, compile and do not throw any exceptions? (Choose two)
Change the method return type from String to Optional.		- correct
Insert .get() at line 2.									- wrong
Insert names.add("Bart"); at line 1.						- wrong, list is immutable
Insert .orElse("Not Found") at line 2.						- correct
Change the method return type from String to Stream.
__________________________________________________

Given:

Path someFile = Path.of("/","users","joe","docs","some.txt");
Path justSomeFile = someFile.getFileName();
Path docsFolder = someFile.getParent();
Path currentFolder = docsFolder.relativize(someFile);
System.out.println(currentFolder);
What is the output of this code?
joe/some.txt
some.txt 		- correct
users/joe
/users/joe/docs

__________________________________________________

Examine these module JAR files and their module-info java files:

//order.jar:
module order {
	requires product;
	exports com.oracle.order;
}
//product.jar:
module product {
	exports com.oracle.product;
}
Which is the only possible result of executing the command jdeps -s order.jar product.jar?
order -> product

java.base -> product
java.base -> order
product -> order

product -> order

order -> product
product -> order

order -> java.base			 - correct
order -> product
product -> java.base

__________________________________________________

Given:

var cities = List.of(new City("Berlin", 3_520_000),
	new City("Hamburg", 1_790_000),
	new City("Munich", 1_450_000),
	new City("Cologne", 1_060_000),
	new City("Frankfurt", 730_000)); 
cities.stream()
	.filter(city -> city.getPopulation() < 1_000_000)
	.findFirst()
	.orElse(new City("Not Found", 0));
	
The List interface
The Optional class - correct
The City Class
The Stream interface
__________________________________________________

Given:

public enum Planet {
	MERCURY(0.39), VENUS(), EARTH;
	private double distanceFromSunAU = 1.0;
	private Planet(double distance){
		distanceFromSunAU = distance;
	}
	private Planet(){
		distanceFromSunAU = 5.0;
	}
	public double getDistace(){
		return distanceFromSunAU;
	}
}
And:
public static void main(String[] args) { 
	for(Planet p : Planet.values()){
		System.out.println(p.getDistace());
	}
}
What is the output when running main method?
0.39 5.0 5.0 			- correct
0.39 5.0 1.0
This does not compile.
0.39 1.0 5.0
0.39 1.0 1.0
__________________________________________________

Given:

public class MyBSClass {
	public static void main(String[] args) {
		byte[] b = new byte[256];
		try (FileInputStream fis = new FileInputStream(args[0]); 
				FileOutputStream fos = new FileOutputStream(args[1])) {
			int count = 0;
			int read = 0;
			while ((read = fis.read(b)) != -1) {
				fos.write(b);
				count += read; // 256 + 255 + 254 + ....
			}
			System.out.println("Output: " + count);
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}
...executed using this command:
java MyBSClass file0.txt file1.txt
What does this code do?
Print 256.
Copy only the first 256 bytes of data from file1.txt into file0.txt. - wrong
Print the difference in file sizes between file0.txt and file1.txt.
Print the size of file0.txt.			- correct
Copy anything beyond the initial 256 bytes of data from file0.txt into file1.txt.  - wrong
__________________________________________________

Given:

try {
	InputStream in = new FileInputStream("missingfile.txt");
	in.read();
	in.close();
}
catch(/*line n1*/) {
	System.out.println(e.getClass().getName());
}
catch(/*line n2*/) {
	System.out.println(e.getClass().getName());
}
Which two changes, made together, allow this code to compile? (Choose two)
Insert at line n1: FileNotFoundException e 	- correct
Insert at line n2: IOException e			- correct
Insert at line n1: IOException e
Insert at line n2: FileNotFoundException e
Insert at line n1: Exception e
__________________________________________________

Given the code fragment:

public class MyInClass {
    public static void main(String[] args) {
        String s = "";
        try (BufferedReader in = new BufferedReader(new InputStreamReader(System.in))) {
            System.out.print("Type e to exit: ");
            s = in.readLine();
            while (s != null) {
                System.out.println("Output: " + s.trim());
                if (s.equals("e")) {
                    System.exit(0);
                }
                System.out.print("Type e to exit: ");
                s = in.readLine();
            }
        } catch (IOException e) {
            System.out.println("Exception: " + e);
        }
    }
}
What is the result when you enter null while executing this program?
The program prints Output: null - correct
An IOException is thrown.
The program exits.
The program prints Output:
__________________________________________________

Given:

module A {
	exports pkgA to B;
	requires D;
}
module B {
	requires transitive A;
}
module C {
	exports pkgC to D;
	requires B;
}
module D {
	exports pkgD;
	requires C;
}
Why does this code fail to compile?
There is a cyclic dependency.			- correct 
Module A is not exported to Module D.
Module A is not exported to Module C.
Module B does not export anything.		- wrong (though after fixing cyclic dependency, it is the next compile error)
__________________________________________________

Given:

public interface TheInterface {
	int field = 99;
	abstract void method();
}
public abstract class TheAbstract {
	int field = 1983;
	abstract void method();
}
public class TheConcrete extends TheAbstract implements TheInterface {
	void method() {
		System.out.println("balloons");
	}
}
Why does compilation fail?
TheConcrete class using the wrong access modifier for method()	- correct?
Interfaces cannot have instance fields
Multiple inheritance of state from field variable 
Multiple inheritance of behavior from method() 	
_________________________________________________

Given:

public class Square {
	private double length;
	public Square(double length) {
		this.length = length;
	}
And given:
public class Cube extends Square {
	public Cube(double length) {
		super(length);
	}
	public double findSurfaceArea() {
		return super.findSurfaceArea() * 6;
	}
}
And given:
public static void main(String[] args){
	Square shape = new Cube(1);
	System.out.println(shape.findSurfaceArea());
}
What is the result?
Does not compile 
36 				
1
6				- correct
__________________________________________________

Given the code fragment:

List<String> list = ...;
list.forEach( x -> { System.out.println(x); } );
What is the type of x?
ArrayList
Stream
Consumer
String 		- correct
List
__________________________________________________

Given:

module A {
	exports pkgA;
	requires B;
	//line n1
}
And given:
open module B {
	exports pkgB;
	//line n2
}
Which is a valid statement?
opens pkgB to pkgA; at line n2
requires B to pkgA; at line n1
requires pkgB; at line n1
opens pkgA; at line n1 			- correct
requires A; at line n2 
__________________________________________________

Which is a valid syntax?

BiConsumer<String, String> lambda = (String x,y) -> System.out.print(x+y);

String city = "Munich";
BiFunction<Integer, Integer, String> lambda = String::substring;

Function<Double, Double> lambda = r -> {double circumference = 2*Math.PI*r;};

Consumer<Integer> lambda = (x) -> {x++; System.out.print(x);}; - correct
__________________________________________________

Given:

public class Test {
	public Test() {
		System.out.print("Message 1" +", ");
	}
	public Test(String message) {
		System.out.print(message +", ");
		display();
	}
	public void display() {
		System.out.print("Message 2" +", ");
	}
	public void display(Object message) {
		System.out.print("Object" +", ");
	}
	public void display(String message) {
		System.out.print(message +", ");
	}
}
And the code fragment:
Test test = new Test();
test.display("Message X");
What is the output?
Message 1, Object,
Message X, Message 2,
Message X, Message 2, Message X,
Message 1, Message X,				- correct
__________________________________________________

Given:

public class Planet {
	private BigDecimal milesFromSun;
	public Planet(String milesFromSun){
		this.milesFromSun = new BigDecimal(milesFromSun);
	}
	public BigDecimal getMilesFromSun(){
		return milesFromSun;
	}
	public static BigDecimal milesToKilometers(BigDecimal miles){
		BigDecimal scale = new BigDecimal("1.60934");
		return miles.multiply(scale);
	}
}
And given:
public static void main(String[] args) {
	Planet earth = new Planet("93000000");
	//line n1
}
Which statement is valid at line n1?
Function<BigDecimal, BigDecimal> lambda = earth.getMilesFromSun()::milesToKilometers;
Function<BigDecimal, BigDecimal> lambda = Planet::milesToKilometers;					- correct
Function<Planet, BigDecimal> lambda = earth::milesToKilometers; 						//uses instance to call static method
Function<Planet, BigDecimal> lambda = Planet::milesToKilometers;
Supplier<BigDecimal> lambda = earth.getMilesFromSun()::milesToKilometers;
Supplier<BigDecimal> lambda = ()::milesToKilometers(earth.getMilesFromSun());

__________________________________________________

Given:

int month = 11; 
switch(month) {
	case 1: case 3: case 5: case 7:
	case 8: case 10: case 12:
		String message = "31 days. ";
		System.out.print(message);
	case 4: case 6: case 9: case 11:
		String message = "30 days. ";
		System.out.print(message);
	case 2:
		String message = "28 days. ";
		System.out.print(message);
}
What is the output of this code?
31 days. 30 days.
30 days.
30 days. 28 days. 							
Does not print because of compilation error 	- correct, variable message declared multiple times
__________________________________________________

Which statements are valid? (Choose two)
BiPredicate<Integer, Integer> test = (x, y) -> x == y; 	- correct
Function<String> hello = () -> "Hello";
BiPredicate<Integer, Integer> add = (x, y) -> x + y;
DoubleConsumer cube = x -> x*x*x;
Supplier<String> hello = () -> "Hello";					- correct
__________________________________________________

Given:

int x = 0;
while(x < 100){
	if(x%3 == 0){
		x += 3;
	}
	if(x%2 == 0){
		x += 2;
		continue;
	}
	x++;
}

What is the value of x after the fourth iteration?
24
12 - correct
10
11
__________________________________________________

Given:

public class Square {
	public int calcArea(int x) {
		return (x * x);
	}
}
And given:
public class Cube extends Square {
	public int calcArea(int x) {
		return super.calcArea(x * 6);
	}
}
And given:
public static void main(String[] args) {
	Cube shape = new Square();
	System.out.println(shape.calcArea(1));
}
What is the result of trying to run this main method?
6
Both 1 and 6 print
1
Compilation fails  - correct
__________________________________________________

Given:

public interface Black {
	default void getColor(){
		System.out.print("Black");
	}
}
public interface Red extends Black {
	default void getColor(){
		System.out.print("Red");
	}
}
public interface Gold {
	static void getColor(){
		System.out.print("Gold");
	}
}
public class Colors implements Black, Red, Gold {
	public static void main(String[] args) {
		Colors colors = new Colors();
		colors.getColor();
	}
}
What is the result of running this code?
Compiler error, error: types Black and Red are incompatible;
Prints: Red			- correct
Prints: Black
Prints: Gold
__________________________________________________

Which statements are valid? (Choose two)
Consumer<String> con3 = final x -> System.out.print(x);
Consumer<String> con2 = final var x -> System.out.print(x);
Consumer<String> con1 = final String x -> System.out.print(x);
BiConsumer<String, String> biCon2 = (final var x, y) -> System.out.println(x+y);
BiConsumer<String, String> biCon3 = (final var x, var y) -> System.out.println(x+y); 		- correct
BiConsumer<String, String> biCon1 = (final var x, final var y) -> System.out.println(x+y);  - correct
__________________________________________________

Given:

public class MyChannelClass {
	public static void main(String[] args) {
		try (FileChannel fcIn = new FileInputStream(args[0]).getChannel();
		FileChannel fcOut = new FileOutputStream(args[1]).getChannel()) {
			ByteBuffer buff = ByteBuffer.allocate((int) fcIn.size());
			System.out.println("Output: " + buff.remaining());
		} catch (Exception e) {
			System.out.println(e);
		} 
	} 
} 
On executing this command:
java MyChannelClass file0.txt file1.txt
What does this code do?
Prints the size of file0.text minus the size of file1.txt.
Copies the content of file0.txt into file1.txt.
Writes the file size of file0.txt into file1.txt.
Prints the size of file1.txt.
Prints the size of file0.txt.		- correct
__________________________________________________

Given:

public static Function<String,String> swap = s -> {
	if(s.equals("Australia"))
		return "New Zealand";
	else
		return s;
	};
And given:
Set<String> islandNations = Set.of("Australia", "Japan", "Taiwan", "Cyprus", "Cuba");
islandNations = islandNations.stream()
	.map(swap)
	.map(n -> n.substring(0, 1))
	.collect(Collectors.toSet());
for(String s : islandNations){
	System.out.print(s);
}
What is the output?
UnsupportedOperationException
TCAJC
TCAJ
TCNJ
TCNJC 
CTJN 	- correct?
TJNC
__________________________________________________

Which cause a compilation error? (Choose two)

public interface TestInterface { 		- correct
	double taxRate = 0.05;
	default void increaseTax() {
		taxRate = taxRate + 0.01;
	}
}

public abstract class testClass {
	double taxRate = 0.05;
	public void increaseTax() {
		taxRate = taxRate + 0.01;
	}
}

public interface TestInterface {
	static double taxRate = 0.05;
	abstract void increaseTax();
}

public abstract class testClass {  		- correct
	double taxRate = 0.05;
	abstract void increaseTax(){
		taxRate = taxRate + 0.01;
	}
}

public interface TestInterface {
	double taxRate = 0.05;
	void increaseTax();
}
__________________________________________________

Given:

module codeHaus {
	exports pkgA;
	exports pkgB to modOne;
	exports pkgC to modOne, modTwo;
}
module modOne {
	//Insert code here
}
What can be inserted in modOne module-info to access pkgC public constructs in module codeHaus?
requires modTwo;
requires pkgA, pkgB, pkgC;
requires codeHaus;   			- correct
requires pkgB, pkgC;
__________________________________________________

Given this code in the file Circle.java:

public class Test {
	public static void main(String args[]) {
		double cir = Circle.findCircumference(7.5);
		System.out.print("Circumference of circle=" + cir);
	}
}
public class Circle {
	public static double findCircumference(int radius) {
		return 2 * Math.PI * radius;
	}
}

What can be done to allow this code to run?
Separate the classes into two .java files.
Call java Circle instead.
Create an instance of Circle before calling findCircumference.
Change the findCircumference method return type.
Call javac Circle first.
Change the findCircumference method parameter type.   	- correct
__________________________________________________

Given:

class Main {
	public static void main(String[] args) {
		Scanner myObj = new Scanner(System.in);
		String input;
		input = myObj.nextLine();
		System.out.println("The input is: " + input);
	}
}
What is the result when you enter null while executing this program?
RuntimeException
NullPointerException
The input is: null		- correct
null
__________________________________________________

Which statement causes a compilation error?
DoubleFunction<Double> area = r -> Math.PI*r*r;
BiFunction<Integer, Integer, Integer> divide = (x, y) -> x/y;
DoublePredicate<Integer, Integer> test = (x, y) -> x == y;		- correct
IntPredicate test = x -> x == 10;
__________________________________________________

Given:

11 public interface FuncInteface {
12 		int sum = 0;
13 		final static int divisor = 3;
14 		double quotient();
15 		default void product() { System.out.println(3); }
16 		abstract int remainder(int x, int y);
17		static int result() { return 0; }
18 		private int count() { return sum; }
19 }
What should you do to make this interface a functional interface? (Choose two)
Remove line 12
Remove line 14		- correct
Remove line 15
Remove line 16		- correct
Remove line 17		
Remove line 14 and 16
Remove line 13 and 17
__________________________________________________

Which statements cause a compiler error when written inside the main method? (Choose two)

var double = 10.0f;						- correct

var list2 = new ArrayList<String>();
list2.add("Hans");
var char2 = list2.get(0).charAt(0);

var list1 = new ArrayList<>();			- correct
list1.add("Otto");
var char1 = list1.get(0).charAt(0);

var name = "Gertrud";
var char3 = name.charAt(0);

var var = 10;
__________________________________________________

Given:

public interface InterfaceOne {
	int field = 99;
	default void method() {
		System.out.print(field);
	}
}
public interface InterfaceTwo {
	int field = 1983;
	private void method() {
		System.out.print(field);
	}
}
public class TheConcrete implements InterfaceOne, InterfaceTwo {
	public static void main(String[] args) {
		TheConcrete theInstance = new TheConcrete();
		theInstance.method();
	}
}
What is the result of running this code?
Prints: 99							- correct
Compiler error. TheConcrete must implement method.
Prints: 1983
Compiler error. There is a multiple inheritance of state caused by field.
__________________________________________________

Given:
public interface TestInterface {
    public abstract double calculateTax();
}
Which classes compile? (Choose two)

public abstract class testClass implements TestInterface { 	- correct? abstract classes dont need to override super methods
	public double calculateTax(double tax){...}
}

public abstract class testClass implements TestInterface { 	//not valid override as of diff return type
	public abstract void calculateTax(){...}
}

public class testClass implements TestInterface {			//wrong, class not abstract and does not override cause of arguments
	public double calculateTax(double tax){...}
}

 
public class testClass {									- correct
	public double calculateTax(){...}
}

public class testClass implements TestInterface {			- wrong, cant have abstract method in non abstract class
	public abstract double calculateTax();
}
__________________________________________________

Given:

int x = 0;
while(x < 100){ 
	if(x%2 == 1){
		x++;
	}
	else if(x%2 == 0){
		x += 3;
	}
}
What is the value of x after the fourth iteration?
8		- correct
15
19
11
__________________________________________________

Given:

public class Store {
	public String desc;
	@CustomAnnotation(owner = "Sam")
	public Store(String desc) {
		this.desc = desc;
	}
}
What is a possible implementation for this annotation?

public @interface CustomAnnotation {
	String owner = "Bob";
	int count = 100;
}

@Target(value = { FIELD, CONSTRUCTOR })
public @interface CustomAnnotation {
	String owner();
	int count() default 100;
}

@Inherited
public @interface CustomAnnotation {			- wrong
	String owner();
	int count();
}

@Target(value = { METHOD })
public @interface CustomAnnotation {			- wrong
	String owner();
	int count() default 100;
}
